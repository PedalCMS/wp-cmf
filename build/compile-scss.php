#!/usr/bin/env php
<?php
/**
 * SCSS Compiler Script
 *
 * Compiles SCSS files to CSS using scssphp.
 * Usage:
 *   php build/compile-scss.php           # Compile once
 *   php build/compile-scss.php --watch   # Watch for changes
 *
 * @package WP_CMF
 */

namespace Namith\WPAdminFields\Build;

use ScssPhp\ScssPhp\Compiler;
use ScssPhp\ScssPhp\OutputStyle;

// Load Composer autoloader
$autoload_paths = [
	__DIR__ . '/../vendor/autoload.php',
	__DIR__ . '/../../../vendor/autoload.php',
];

foreach ( $autoload_paths as $autoload_path ) {
	if ( file_exists( $autoload_path ) ) {
		require $autoload_path;
		break;
	}
}

if ( ! class_exists( Compiler::class ) ) {
	fwrite( STDERR, "Error: scssphp/scssphp not found. Run: composer install\n" );
	exit( 1 );
}

/**
 * Compile SCSS file to CSS
 *
 * @param string $input_file  Path to SCSS input file.
 * @param string $output_file Path to CSS output file.
 * @param string $style       Output style (expanded, compressed).
 * @return bool Success
 */
function compile_scss( string $input_file, string $output_file, string $style = 'expanded' ): bool {
	if ( ! file_exists( $input_file ) ) {
		fwrite( STDERR, "Error: Input file not found: {$input_file}\n" );
		return false;
	}

	try {
		$compiler = new Compiler();

		// Set output style.
		if ( 'compressed' === $style ) {
			$compiler->setOutputStyle( OutputStyle::COMPRESSED );
		} else {
			$compiler->setOutputStyle( OutputStyle::EXPANDED );
		}

		// Set import paths.
		$compiler->addImportPath( dirname( $input_file ) );

		// Read and compile SCSS.
		$scss = file_get_contents( $input_file );
		$result = $compiler->compileString( $scss );
		$css = $result->getCss();

		// Add header comment.
		$header  = "/*!\n";
		$header .= " * WP-CMF Stylesheet\n";
		$header .= " * Compiled from SCSS on " . date( 'Y-m-d H:i:s' ) . "\n";
		$header .= " * DO NOT EDIT THIS FILE DIRECTLY - Edit the .scss source instead\n";
		$header .= " */\n\n";

		// Write to output file.
		$output_dir = dirname( $output_file );
		if ( ! is_dir( $output_dir ) ) {
			mkdir( $output_dir, 0755, true );
		}

		file_put_contents( $output_file, $header . $css );

		$relative_path = str_replace( dirname( __DIR__ ) . DIRECTORY_SEPARATOR, '', $output_file );
		echo "âœ“ Compiled: {$relative_path}\n";
		return true;

	} catch ( \Exception $e ) {
		fwrite( STDERR, "Error compiling SCSS: {$e->getMessage()}\n" );
		return false;
	}
}

/**
 * Watch SCSS file for changes
 *
 * @param string $input_file  Path to SCSS input file.
 * @param string $output_file Path to CSS output file.
 * @param string $style       Output style.
 */
function watch_scss( string $input_file, string $output_file, string $style = 'expanded' ): void {
	echo "Watching for SCSS changes... (Press Ctrl+C to stop)\n";

	$last_mtime = 0;

	while ( true ) {
		clearstatcache( true, $input_file );
		$current_mtime = file_exists( $input_file ) ? filemtime( $input_file ) : 0;

		if ( $current_mtime > $last_mtime ) {
			if ( $last_mtime > 0 ) {
				echo "\nChange detected...\n";
			}
			compile_scss( $input_file, $output_file, $style );
			$last_mtime = $current_mtime;
		}

		sleep( 1 );
	}
}

// Configuration.
$root_dir  = dirname( __DIR__ );
$scss_file = $root_dir . '/src/assets/scss/wp-cmf.scss';
$css_file  = $root_dir . '/src/assets/css/wp-cmf.css';

// Parse command line arguments.
$watch      = in_array( '--watch', $argv, true ) || in_array( '-w', $argv, true );
$compressed = in_array( '--compressed', $argv, true ) || in_array( '-c', $argv, true );
$style      = $compressed ? 'compressed' : 'expanded';

// Run compiler.
if ( $watch ) {
	// Initial compile.
	compile_scss( $scss_file, $css_file, $style );
	// Watch for changes.
	watch_scss( $scss_file, $css_file, $style );
} else {
	// Single compile.
	$success = compile_scss( $scss_file, $css_file, $style );
	exit( $success ? 0 : 1 );
}
